/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DocumentPayments as PrismaDocumentPayments,
} from "@prisma/client";

export class DocumentPaymentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DocumentPaymentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.documentPayments.count(args);
  }

  async documentPaymentsItems(
    args: Prisma.DocumentPaymentsFindManyArgs
  ): Promise<PrismaDocumentPayments[]> {
    return this.prisma.documentPayments.findMany(args);
  }
  async documentPayments(
    args: Prisma.DocumentPaymentsFindUniqueArgs
  ): Promise<PrismaDocumentPayments | null> {
    return this.prisma.documentPayments.findUnique(args);
  }
  async createDocumentPayments(
    args: Prisma.DocumentPaymentsCreateArgs
  ): Promise<PrismaDocumentPayments> {
    return this.prisma.documentPayments.create(args);
  }
  async updateDocumentPayments(
    args: Prisma.DocumentPaymentsUpdateArgs
  ): Promise<PrismaDocumentPayments> {
    return this.prisma.documentPayments.update(args);
  }
  async deleteDocumentPayments(
    args: Prisma.DocumentPaymentsDeleteArgs
  ): Promise<PrismaDocumentPayments> {
    return this.prisma.documentPayments.delete(args);
  }
}
