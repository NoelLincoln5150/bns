/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WaterTokens as PrismaWaterTokens } from "@prisma/client";

export class WaterTokensServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WaterTokensCountArgs, "select">
  ): Promise<number> {
    return this.prisma.waterTokens.count(args);
  }

  async waterTokensItems(
    args: Prisma.WaterTokensFindManyArgs
  ): Promise<PrismaWaterTokens[]> {
    return this.prisma.waterTokens.findMany(args);
  }
  async waterTokens(
    args: Prisma.WaterTokensFindUniqueArgs
  ): Promise<PrismaWaterTokens | null> {
    return this.prisma.waterTokens.findUnique(args);
  }
  async createWaterTokens(
    args: Prisma.WaterTokensCreateArgs
  ): Promise<PrismaWaterTokens> {
    return this.prisma.waterTokens.create(args);
  }
  async updateWaterTokens(
    args: Prisma.WaterTokensUpdateArgs
  ): Promise<PrismaWaterTokens> {
    return this.prisma.waterTokens.update(args);
  }
  async deleteWaterTokens(
    args: Prisma.WaterTokensDeleteArgs
  ): Promise<PrismaWaterTokens> {
    return this.prisma.waterTokens.delete(args);
  }
}
