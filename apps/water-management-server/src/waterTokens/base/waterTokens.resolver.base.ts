/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WaterTokens } from "./WaterTokens";
import { WaterTokensCountArgs } from "./WaterTokensCountArgs";
import { WaterTokensFindManyArgs } from "./WaterTokensFindManyArgs";
import { WaterTokensFindUniqueArgs } from "./WaterTokensFindUniqueArgs";
import { DeleteWaterTokensArgs } from "./DeleteWaterTokensArgs";
import { WaterTokensService } from "../waterTokens.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WaterTokens)
export class WaterTokensResolverBase {
  constructor(
    protected readonly service: WaterTokensService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WaterTokens",
    action: "read",
    possession: "any",
  })
  async _waterTokensItemsMeta(
    @graphql.Args() args: WaterTokensCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WaterTokens])
  @nestAccessControl.UseRoles({
    resource: "WaterTokens",
    action: "read",
    possession: "any",
  })
  async waterTokensItems(
    @graphql.Args() args: WaterTokensFindManyArgs
  ): Promise<WaterTokens[]> {
    return this.service.waterTokensItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WaterTokens, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WaterTokens",
    action: "read",
    possession: "own",
  })
  async waterTokens(
    @graphql.Args() args: WaterTokensFindUniqueArgs
  ): Promise<WaterTokens | null> {
    const result = await this.service.waterTokens(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WaterTokens)
  @nestAccessControl.UseRoles({
    resource: "WaterTokens",
    action: "delete",
    possession: "any",
  })
  async deleteWaterTokens(
    @graphql.Args() args: DeleteWaterTokensArgs
  ): Promise<WaterTokens | null> {
    try {
      return await this.service.deleteWaterTokens(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
