/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FailedJobs as PrismaFailedJobs } from "@prisma/client";

export class FailedJobsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FailedJobsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.failedJobs.count(args);
  }

  async failedJobsItems(
    args: Prisma.FailedJobsFindManyArgs
  ): Promise<PrismaFailedJobs[]> {
    return this.prisma.failedJobs.findMany(args);
  }
  async failedJobs(
    args: Prisma.FailedJobsFindUniqueArgs
  ): Promise<PrismaFailedJobs | null> {
    return this.prisma.failedJobs.findUnique(args);
  }
  async createFailedJobs(
    args: Prisma.FailedJobsCreateArgs
  ): Promise<PrismaFailedJobs> {
    return this.prisma.failedJobs.create(args);
  }
  async updateFailedJobs(
    args: Prisma.FailedJobsUpdateArgs
  ): Promise<PrismaFailedJobs> {
    return this.prisma.failedJobs.update(args);
  }
  async deleteFailedJobs(
    args: Prisma.FailedJobsDeleteArgs
  ): Promise<PrismaFailedJobs> {
    return this.prisma.failedJobs.delete(args);
  }
}
