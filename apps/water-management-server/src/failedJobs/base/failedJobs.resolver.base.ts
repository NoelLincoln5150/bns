/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FailedJobs } from "./FailedJobs";
import { FailedJobsCountArgs } from "./FailedJobsCountArgs";
import { FailedJobsFindManyArgs } from "./FailedJobsFindManyArgs";
import { FailedJobsFindUniqueArgs } from "./FailedJobsFindUniqueArgs";
import { CreateFailedJobsArgs } from "./CreateFailedJobsArgs";
import { UpdateFailedJobsArgs } from "./UpdateFailedJobsArgs";
import { DeleteFailedJobsArgs } from "./DeleteFailedJobsArgs";
import { FailedJobsService } from "../failedJobs.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FailedJobs)
export class FailedJobsResolverBase {
  constructor(
    protected readonly service: FailedJobsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FailedJobs",
    action: "read",
    possession: "any",
  })
  async _failedJobsItemsMeta(
    @graphql.Args() args: FailedJobsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FailedJobs])
  @nestAccessControl.UseRoles({
    resource: "FailedJobs",
    action: "read",
    possession: "any",
  })
  async failedJobsItems(
    @graphql.Args() args: FailedJobsFindManyArgs
  ): Promise<FailedJobs[]> {
    return this.service.failedJobsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FailedJobs, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FailedJobs",
    action: "read",
    possession: "own",
  })
  async failedJobs(
    @graphql.Args() args: FailedJobsFindUniqueArgs
  ): Promise<FailedJobs | null> {
    const result = await this.service.failedJobs(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FailedJobs)
  @nestAccessControl.UseRoles({
    resource: "FailedJobs",
    action: "create",
    possession: "any",
  })
  async createFailedJobs(
    @graphql.Args() args: CreateFailedJobsArgs
  ): Promise<FailedJobs> {
    return await this.service.createFailedJobs({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FailedJobs)
  @nestAccessControl.UseRoles({
    resource: "FailedJobs",
    action: "update",
    possession: "any",
  })
  async updateFailedJobs(
    @graphql.Args() args: UpdateFailedJobsArgs
  ): Promise<FailedJobs | null> {
    try {
      return await this.service.updateFailedJobs({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FailedJobs)
  @nestAccessControl.UseRoles({
    resource: "FailedJobs",
    action: "delete",
    possession: "any",
  })
  async deleteFailedJobs(
    @graphql.Args() args: DeleteFailedJobsArgs
  ): Promise<FailedJobs | null> {
    try {
      return await this.service.deleteFailedJobs(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
