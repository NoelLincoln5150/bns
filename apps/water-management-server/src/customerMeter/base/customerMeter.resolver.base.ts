/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerMeter } from "./CustomerMeter";
import { CustomerMeterCountArgs } from "./CustomerMeterCountArgs";
import { CustomerMeterFindManyArgs } from "./CustomerMeterFindManyArgs";
import { CustomerMeterFindUniqueArgs } from "./CustomerMeterFindUniqueArgs";
import { CreateCustomerMeterArgs } from "./CreateCustomerMeterArgs";
import { UpdateCustomerMeterArgs } from "./UpdateCustomerMeterArgs";
import { DeleteCustomerMeterArgs } from "./DeleteCustomerMeterArgs";
import { Customers } from "../../customers/base/Customers";
import { Meter } from "../../meter/base/Meter";
import { CustomerMeterService } from "../customerMeter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerMeter)
export class CustomerMeterResolverBase {
  constructor(
    protected readonly service: CustomerMeterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerMeter",
    action: "read",
    possession: "any",
  })
  async _customerMetersMeta(
    @graphql.Args() args: CustomerMeterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerMeter])
  @nestAccessControl.UseRoles({
    resource: "CustomerMeter",
    action: "read",
    possession: "any",
  })
  async customerMeters(
    @graphql.Args() args: CustomerMeterFindManyArgs
  ): Promise<CustomerMeter[]> {
    return this.service.customerMeters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerMeter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerMeter",
    action: "read",
    possession: "own",
  })
  async customerMeter(
    @graphql.Args() args: CustomerMeterFindUniqueArgs
  ): Promise<CustomerMeter | null> {
    const result = await this.service.customerMeter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerMeter)
  @nestAccessControl.UseRoles({
    resource: "CustomerMeter",
    action: "create",
    possession: "any",
  })
  async createCustomerMeter(
    @graphql.Args() args: CreateCustomerMeterArgs
  ): Promise<CustomerMeter> {
    return await this.service.createCustomerMeter({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        meterId: args.data.meterId
          ? {
              connect: args.data.meterId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerMeter)
  @nestAccessControl.UseRoles({
    resource: "CustomerMeter",
    action: "update",
    possession: "any",
  })
  async updateCustomerMeter(
    @graphql.Args() args: UpdateCustomerMeterArgs
  ): Promise<CustomerMeter | null> {
    try {
      return await this.service.updateCustomerMeter({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          meterId: args.data.meterId
            ? {
                connect: args.data.meterId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerMeter)
  @nestAccessControl.UseRoles({
    resource: "CustomerMeter",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerMeter(
    @graphql.Args() args: DeleteCustomerMeterArgs
  ): Promise<CustomerMeter | null> {
    try {
      return await this.service.deleteCustomerMeter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customers, {
    nullable: true,
    name: "customer",
  })
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "read",
    possession: "any",
  })
  async getCustomer(
    @graphql.Parent() parent: CustomerMeter
  ): Promise<Customers | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Meter, {
    nullable: true,
    name: "meterId",
  })
  @nestAccessControl.UseRoles({
    resource: "Meter",
    action: "read",
    possession: "any",
  })
  async getMeterId(
    @graphql.Parent() parent: CustomerMeter
  ): Promise<Meter | null> {
    const result = await this.service.getMeterId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
