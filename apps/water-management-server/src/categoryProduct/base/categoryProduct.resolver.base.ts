/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CategoryProduct } from "./CategoryProduct";
import { CategoryProductCountArgs } from "./CategoryProductCountArgs";
import { CategoryProductFindManyArgs } from "./CategoryProductFindManyArgs";
import { CategoryProductFindUniqueArgs } from "./CategoryProductFindUniqueArgs";
import { CreateCategoryProductArgs } from "./CreateCategoryProductArgs";
import { UpdateCategoryProductArgs } from "./UpdateCategoryProductArgs";
import { DeleteCategoryProductArgs } from "./DeleteCategoryProductArgs";
import { Products } from "../../products/base/Products";
import { CategoryProductService } from "../categoryProduct.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CategoryProduct)
export class CategoryProductResolverBase {
  constructor(
    protected readonly service: CategoryProductService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CategoryProduct",
    action: "read",
    possession: "any",
  })
  async _categoryProductsMeta(
    @graphql.Args() args: CategoryProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CategoryProduct])
  @nestAccessControl.UseRoles({
    resource: "CategoryProduct",
    action: "read",
    possession: "any",
  })
  async categoryProducts(
    @graphql.Args() args: CategoryProductFindManyArgs
  ): Promise<CategoryProduct[]> {
    return this.service.categoryProducts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CategoryProduct, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CategoryProduct",
    action: "read",
    possession: "own",
  })
  async categoryProduct(
    @graphql.Args() args: CategoryProductFindUniqueArgs
  ): Promise<CategoryProduct | null> {
    const result = await this.service.categoryProduct(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CategoryProduct)
  @nestAccessControl.UseRoles({
    resource: "CategoryProduct",
    action: "create",
    possession: "any",
  })
  async createCategoryProduct(
    @graphql.Args() args: CreateCategoryProductArgs
  ): Promise<CategoryProduct> {
    return await this.service.createCategoryProduct({
      ...args,
      data: {
        ...args.data,

        productI: args.data.productI
          ? {
              connect: args.data.productI,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CategoryProduct)
  @nestAccessControl.UseRoles({
    resource: "CategoryProduct",
    action: "update",
    possession: "any",
  })
  async updateCategoryProduct(
    @graphql.Args() args: UpdateCategoryProductArgs
  ): Promise<CategoryProduct | null> {
    try {
      return await this.service.updateCategoryProduct({
        ...args,
        data: {
          ...args.data,

          productI: args.data.productI
            ? {
                connect: args.data.productI,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CategoryProduct)
  @nestAccessControl.UseRoles({
    resource: "CategoryProduct",
    action: "delete",
    possession: "any",
  })
  async deleteCategoryProduct(
    @graphql.Args() args: DeleteCategoryProductArgs
  ): Promise<CategoryProduct | null> {
    try {
      return await this.service.deleteCategoryProduct(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Products, {
    nullable: true,
    name: "productI",
  })
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "read",
    possession: "any",
  })
  async getProductI(
    @graphql.Parent() parent: CategoryProduct
  ): Promise<Products | null> {
    const result = await this.service.getProductI(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
