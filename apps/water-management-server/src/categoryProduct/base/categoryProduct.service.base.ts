/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CategoryProduct as PrismaCategoryProduct,
  Products as PrismaProducts,
} from "@prisma/client";

export class CategoryProductServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CategoryProductCountArgs, "select">
  ): Promise<number> {
    return this.prisma.categoryProduct.count(args);
  }

  async categoryProducts(
    args: Prisma.CategoryProductFindManyArgs
  ): Promise<PrismaCategoryProduct[]> {
    return this.prisma.categoryProduct.findMany(args);
  }
  async categoryProduct(
    args: Prisma.CategoryProductFindUniqueArgs
  ): Promise<PrismaCategoryProduct | null> {
    return this.prisma.categoryProduct.findUnique(args);
  }
  async createCategoryProduct(
    args: Prisma.CategoryProductCreateArgs
  ): Promise<PrismaCategoryProduct> {
    return this.prisma.categoryProduct.create(args);
  }
  async updateCategoryProduct(
    args: Prisma.CategoryProductUpdateArgs
  ): Promise<PrismaCategoryProduct> {
    return this.prisma.categoryProduct.update(args);
  }
  async deleteCategoryProduct(
    args: Prisma.CategoryProductDeleteArgs
  ): Promise<PrismaCategoryProduct> {
    return this.prisma.categoryProduct.delete(args);
  }

  async getProductI(parentId: string): Promise<PrismaProducts | null> {
    return this.prisma.categoryProduct
      .findUnique({
        where: { id: parentId },
      })
      .productI();
  }
}
