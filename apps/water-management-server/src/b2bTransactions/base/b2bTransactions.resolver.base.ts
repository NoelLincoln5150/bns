/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { B2bTransactions } from "./B2bTransactions";
import { B2bTransactionsCountArgs } from "./B2bTransactionsCountArgs";
import { B2bTransactionsFindManyArgs } from "./B2bTransactionsFindManyArgs";
import { B2bTransactionsFindUniqueArgs } from "./B2bTransactionsFindUniqueArgs";
import { CreateB2bTransactionsArgs } from "./CreateB2bTransactionsArgs";
import { UpdateB2bTransactionsArgs } from "./UpdateB2bTransactionsArgs";
import { DeleteB2bTransactionsArgs } from "./DeleteB2bTransactionsArgs";
import { Customers } from "../../customers/base/Customers";
import { PaymentAccounts } from "../../paymentAccounts/base/PaymentAccounts";
import { B2bTransactionsService } from "../b2bTransactions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => B2bTransactions)
export class B2bTransactionsResolverBase {
  constructor(
    protected readonly service: B2bTransactionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "B2bTransactions",
    action: "read",
    possession: "any",
  })
  async _b2bTransactionsItemsMeta(
    @graphql.Args() args: B2bTransactionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [B2bTransactions])
  @nestAccessControl.UseRoles({
    resource: "B2bTransactions",
    action: "read",
    possession: "any",
  })
  async b2bTransactionsItems(
    @graphql.Args() args: B2bTransactionsFindManyArgs
  ): Promise<B2bTransactions[]> {
    return this.service.b2bTransactionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => B2bTransactions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "B2bTransactions",
    action: "read",
    possession: "own",
  })
  async b2bTransactions(
    @graphql.Args() args: B2bTransactionsFindUniqueArgs
  ): Promise<B2bTransactions | null> {
    const result = await this.service.b2bTransactions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => B2bTransactions)
  @nestAccessControl.UseRoles({
    resource: "B2bTransactions",
    action: "create",
    possession: "any",
  })
  async createB2bTransactions(
    @graphql.Args() args: CreateB2bTransactionsArgs
  ): Promise<B2bTransactions> {
    return await this.service.createB2bTransactions({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        paymentAccount: args.data.paymentAccount
          ? {
              connect: args.data.paymentAccount,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => B2bTransactions)
  @nestAccessControl.UseRoles({
    resource: "B2bTransactions",
    action: "update",
    possession: "any",
  })
  async updateB2bTransactions(
    @graphql.Args() args: UpdateB2bTransactionsArgs
  ): Promise<B2bTransactions | null> {
    try {
      return await this.service.updateB2bTransactions({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          paymentAccount: args.data.paymentAccount
            ? {
                connect: args.data.paymentAccount,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => B2bTransactions)
  @nestAccessControl.UseRoles({
    resource: "B2bTransactions",
    action: "delete",
    possession: "any",
  })
  async deleteB2bTransactions(
    @graphql.Args() args: DeleteB2bTransactionsArgs
  ): Promise<B2bTransactions | null> {
    try {
      return await this.service.deleteB2bTransactions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customers, {
    nullable: true,
    name: "customer",
  })
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "read",
    possession: "any",
  })
  async getCustomer(
    @graphql.Parent() parent: B2bTransactions
  ): Promise<Customers | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentAccounts, {
    nullable: true,
    name: "paymentAccount",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "read",
    possession: "any",
  })
  async getPaymentAccount(
    @graphql.Parent() parent: B2bTransactions
  ): Promise<PaymentAccounts | null> {
    const result = await this.service.getPaymentAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
