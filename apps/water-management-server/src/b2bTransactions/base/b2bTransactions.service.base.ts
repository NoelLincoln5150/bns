/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  B2bTransactions as PrismaB2bTransactions,
  Customers as PrismaCustomers,
  PaymentAccounts as PrismaPaymentAccounts,
} from "@prisma/client";

export class B2bTransactionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.B2bTransactionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.b2bTransactions.count(args);
  }

  async b2bTransactionsItems(
    args: Prisma.B2bTransactionsFindManyArgs
  ): Promise<PrismaB2bTransactions[]> {
    return this.prisma.b2bTransactions.findMany(args);
  }
  async b2bTransactions(
    args: Prisma.B2bTransactionsFindUniqueArgs
  ): Promise<PrismaB2bTransactions | null> {
    return this.prisma.b2bTransactions.findUnique(args);
  }
  async createB2bTransactions(
    args: Prisma.B2bTransactionsCreateArgs
  ): Promise<PrismaB2bTransactions> {
    return this.prisma.b2bTransactions.create(args);
  }
  async updateB2bTransactions(
    args: Prisma.B2bTransactionsUpdateArgs
  ): Promise<PrismaB2bTransactions> {
    return this.prisma.b2bTransactions.update(args);
  }
  async deleteB2bTransactions(
    args: Prisma.B2bTransactionsDeleteArgs
  ): Promise<PrismaB2bTransactions> {
    return this.prisma.b2bTransactions.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomers | null> {
    return this.prisma.b2bTransactions
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getPaymentAccount(
    parentId: string
  ): Promise<PrismaPaymentAccounts | null> {
    return this.prisma.b2bTransactions
      .findUnique({
        where: { id: parentId },
      })
      .paymentAccount();
  }
}
