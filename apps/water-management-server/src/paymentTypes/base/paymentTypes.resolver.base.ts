/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaymentTypes } from "./PaymentTypes";
import { PaymentTypesCountArgs } from "./PaymentTypesCountArgs";
import { PaymentTypesFindManyArgs } from "./PaymentTypesFindManyArgs";
import { PaymentTypesFindUniqueArgs } from "./PaymentTypesFindUniqueArgs";
import { CreatePaymentTypesArgs } from "./CreatePaymentTypesArgs";
import { UpdatePaymentTypesArgs } from "./UpdatePaymentTypesArgs";
import { DeletePaymentTypesArgs } from "./DeletePaymentTypesArgs";
import { DocumentPaymentsFindManyArgs } from "../../documentPayments/base/DocumentPaymentsFindManyArgs";
import { DocumentPayments } from "../../documentPayments/base/DocumentPayments";
import { PaymentChannelsFindManyArgs } from "../../paymentChannels/base/PaymentChannelsFindManyArgs";
import { PaymentChannels } from "../../paymentChannels/base/PaymentChannels";
import { PaymentTypesService } from "../paymentTypes.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentTypes)
export class PaymentTypesResolverBase {
  constructor(
    protected readonly service: PaymentTypesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentTypes",
    action: "read",
    possession: "any",
  })
  async _paymentTypesItemsMeta(
    @graphql.Args() args: PaymentTypesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentTypes])
  @nestAccessControl.UseRoles({
    resource: "PaymentTypes",
    action: "read",
    possession: "any",
  })
  async paymentTypesItems(
    @graphql.Args() args: PaymentTypesFindManyArgs
  ): Promise<PaymentTypes[]> {
    return this.service.paymentTypesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentTypes, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentTypes",
    action: "read",
    possession: "own",
  })
  async paymentTypes(
    @graphql.Args() args: PaymentTypesFindUniqueArgs
  ): Promise<PaymentTypes | null> {
    const result = await this.service.paymentTypes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentTypes)
  @nestAccessControl.UseRoles({
    resource: "PaymentTypes",
    action: "create",
    possession: "any",
  })
  async createPaymentTypes(
    @graphql.Args() args: CreatePaymentTypesArgs
  ): Promise<PaymentTypes> {
    return await this.service.createPaymentTypes({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentTypes)
  @nestAccessControl.UseRoles({
    resource: "PaymentTypes",
    action: "update",
    possession: "any",
  })
  async updatePaymentTypes(
    @graphql.Args() args: UpdatePaymentTypesArgs
  ): Promise<PaymentTypes | null> {
    try {
      return await this.service.updatePaymentTypes({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentTypes)
  @nestAccessControl.UseRoles({
    resource: "PaymentTypes",
    action: "delete",
    possession: "any",
  })
  async deletePaymentTypes(
    @graphql.Args() args: DeletePaymentTypesArgs
  ): Promise<PaymentTypes | null> {
    try {
      return await this.service.deletePaymentTypes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DocumentPayments], {
    name: "documentPaymentsItems",
  })
  @nestAccessControl.UseRoles({
    resource: "DocumentPayments",
    action: "read",
    possession: "any",
  })
  async findDocumentPaymentsItems(
    @graphql.Parent() parent: PaymentTypes,
    @graphql.Args() args: DocumentPaymentsFindManyArgs
  ): Promise<DocumentPayments[]> {
    const results = await this.service.findDocumentPaymentsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentChannels], {
    name: "paymentChannelsItems",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentChannels",
    action: "read",
    possession: "any",
  })
  async findPaymentChannelsItems(
    @graphql.Parent() parent: PaymentTypes,
    @graphql.Args() args: PaymentChannelsFindManyArgs
  ): Promise<PaymentChannels[]> {
    const results = await this.service.findPaymentChannelsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
