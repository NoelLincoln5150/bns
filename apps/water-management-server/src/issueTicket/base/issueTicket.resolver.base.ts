/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { IssueTicket } from "./IssueTicket";
import { IssueTicketCountArgs } from "./IssueTicketCountArgs";
import { IssueTicketFindManyArgs } from "./IssueTicketFindManyArgs";
import { IssueTicketFindUniqueArgs } from "./IssueTicketFindUniqueArgs";
import { CreateIssueTicketArgs } from "./CreateIssueTicketArgs";
import { UpdateIssueTicketArgs } from "./UpdateIssueTicketArgs";
import { DeleteIssueTicketArgs } from "./DeleteIssueTicketArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { IssueTicketService } from "../issueTicket.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IssueTicket)
export class IssueTicketResolverBase {
  constructor(
    protected readonly service: IssueTicketService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IssueTicket",
    action: "read",
    possession: "any",
  })
  async _issueTicketsMeta(
    @graphql.Args() args: IssueTicketCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IssueTicket])
  @nestAccessControl.UseRoles({
    resource: "IssueTicket",
    action: "read",
    possession: "any",
  })
  async issueTickets(
    @graphql.Args() args: IssueTicketFindManyArgs
  ): Promise<IssueTicket[]> {
    return this.service.issueTickets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IssueTicket, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IssueTicket",
    action: "read",
    possession: "own",
  })
  async issueTicket(
    @graphql.Args() args: IssueTicketFindUniqueArgs
  ): Promise<IssueTicket | null> {
    const result = await this.service.issueTicket(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IssueTicket)
  @nestAccessControl.UseRoles({
    resource: "IssueTicket",
    action: "create",
    possession: "any",
  })
  async createIssueTicket(
    @graphql.Args() args: CreateIssueTicketArgs
  ): Promise<IssueTicket> {
    return await this.service.createIssueTicket({
      ...args,
      data: {
        ...args.data,

        appUser: args.data.appUser
          ? {
              connect: args.data.appUser,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IssueTicket)
  @nestAccessControl.UseRoles({
    resource: "IssueTicket",
    action: "update",
    possession: "any",
  })
  async updateIssueTicket(
    @graphql.Args() args: UpdateIssueTicketArgs
  ): Promise<IssueTicket | null> {
    try {
      return await this.service.updateIssueTicket({
        ...args,
        data: {
          ...args.data,

          appUser: args.data.appUser
            ? {
                connect: args.data.appUser,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IssueTicket)
  @nestAccessControl.UseRoles({
    resource: "IssueTicket",
    action: "delete",
    possession: "any",
  })
  async deleteIssueTicket(
    @graphql.Args() args: DeleteIssueTicketArgs
  ): Promise<IssueTicket | null> {
    try {
      return await this.service.deleteIssueTicket(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUser",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUser(
    @graphql.Parent() parent: IssueTicket
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
