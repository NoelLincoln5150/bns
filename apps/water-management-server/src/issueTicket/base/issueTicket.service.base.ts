/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  IssueTicket as PrismaIssueTicket,
  AppUser as PrismaAppUser,
} from "@prisma/client";

export class IssueTicketServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IssueTicketCountArgs, "select">
  ): Promise<number> {
    return this.prisma.issueTicket.count(args);
  }

  async issueTickets(
    args: Prisma.IssueTicketFindManyArgs
  ): Promise<PrismaIssueTicket[]> {
    return this.prisma.issueTicket.findMany(args);
  }
  async issueTicket(
    args: Prisma.IssueTicketFindUniqueArgs
  ): Promise<PrismaIssueTicket | null> {
    return this.prisma.issueTicket.findUnique(args);
  }
  async createIssueTicket(
    args: Prisma.IssueTicketCreateArgs
  ): Promise<PrismaIssueTicket> {
    return this.prisma.issueTicket.create(args);
  }
  async updateIssueTicket(
    args: Prisma.IssueTicketUpdateArgs
  ): Promise<PrismaIssueTicket> {
    return this.prisma.issueTicket.update(args);
  }
  async deleteIssueTicket(
    args: Prisma.IssueTicketDeleteArgs
  ): Promise<PrismaIssueTicket> {
    return this.prisma.issueTicket.delete(args);
  }

  async getAppUser(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.issueTicket
      .findUnique({
        where: { id: parentId },
      })
      .appUser();
  }
}
