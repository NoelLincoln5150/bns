/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Premises } from "./Premises";
import { PremisesCountArgs } from "./PremisesCountArgs";
import { PremisesFindManyArgs } from "./PremisesFindManyArgs";
import { PremisesFindUniqueArgs } from "./PremisesFindUniqueArgs";
import { CreatePremisesArgs } from "./CreatePremisesArgs";
import { UpdatePremisesArgs } from "./UpdatePremisesArgs";
import { DeletePremisesArgs } from "./DeletePremisesArgs";
import { PremisesService } from "../premises.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Premises)
export class PremisesResolverBase {
  constructor(
    protected readonly service: PremisesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Premises",
    action: "read",
    possession: "any",
  })
  async _premisesItemsMeta(
    @graphql.Args() args: PremisesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Premises])
  @nestAccessControl.UseRoles({
    resource: "Premises",
    action: "read",
    possession: "any",
  })
  async premisesItems(
    @graphql.Args() args: PremisesFindManyArgs
  ): Promise<Premises[]> {
    return this.service.premisesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Premises, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Premises",
    action: "read",
    possession: "own",
  })
  async premises(
    @graphql.Args() args: PremisesFindUniqueArgs
  ): Promise<Premises | null> {
    const result = await this.service.premises(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Premises)
  @nestAccessControl.UseRoles({
    resource: "Premises",
    action: "create",
    possession: "any",
  })
  async createPremises(
    @graphql.Args() args: CreatePremisesArgs
  ): Promise<Premises> {
    return await this.service.createPremises({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Premises)
  @nestAccessControl.UseRoles({
    resource: "Premises",
    action: "update",
    possession: "any",
  })
  async updatePremises(
    @graphql.Args() args: UpdatePremisesArgs
  ): Promise<Premises | null> {
    try {
      return await this.service.updatePremises({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Premises)
  @nestAccessControl.UseRoles({
    resource: "Premises",
    action: "delete",
    possession: "any",
  })
  async deletePremises(
    @graphql.Args() args: DeletePremisesArgs
  ): Promise<Premises | null> {
    try {
      return await this.service.deletePremises(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
