/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Premises as PrismaPremises } from "@prisma/client";

export class PremisesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PremisesCountArgs, "select">): Promise<number> {
    return this.prisma.premises.count(args);
  }

  async premisesItems(
    args: Prisma.PremisesFindManyArgs
  ): Promise<PrismaPremises[]> {
    return this.prisma.premises.findMany(args);
  }
  async premises(
    args: Prisma.PremisesFindUniqueArgs
  ): Promise<PrismaPremises | null> {
    return this.prisma.premises.findUnique(args);
  }
  async createPremises(
    args: Prisma.PremisesCreateArgs
  ): Promise<PrismaPremises> {
    return this.prisma.premises.create(args);
  }
  async updatePremises(
    args: Prisma.PremisesUpdateArgs
  ): Promise<PrismaPremises> {
    return this.prisma.premises.update(args);
  }
  async deletePremises(
    args: Prisma.PremisesDeleteArgs
  ): Promise<PrismaPremises> {
    return this.prisma.premises.delete(args);
  }
}
