/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ShortCodes as PrismaShortCodes } from "@prisma/client";

export class ShortCodesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShortCodesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shortCodes.count(args);
  }

  async shortCodesItems(
    args: Prisma.ShortCodesFindManyArgs
  ): Promise<PrismaShortCodes[]> {
    return this.prisma.shortCodes.findMany(args);
  }
  async shortCodes(
    args: Prisma.ShortCodesFindUniqueArgs
  ): Promise<PrismaShortCodes | null> {
    return this.prisma.shortCodes.findUnique(args);
  }
  async createShortCodes(
    args: Prisma.ShortCodesCreateArgs
  ): Promise<PrismaShortCodes> {
    return this.prisma.shortCodes.create(args);
  }
  async updateShortCodes(
    args: Prisma.ShortCodesUpdateArgs
  ): Promise<PrismaShortCodes> {
    return this.prisma.shortCodes.update(args);
  }
  async deleteShortCodes(
    args: Prisma.ShortCodesDeleteArgs
  ): Promise<PrismaShortCodes> {
    return this.prisma.shortCodes.delete(args);
  }
}
