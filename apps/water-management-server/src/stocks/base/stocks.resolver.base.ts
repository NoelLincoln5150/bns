/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Stocks } from "./Stocks";
import { StocksCountArgs } from "./StocksCountArgs";
import { StocksFindManyArgs } from "./StocksFindManyArgs";
import { StocksFindUniqueArgs } from "./StocksFindUniqueArgs";
import { CreateStocksArgs } from "./CreateStocksArgs";
import { UpdateStocksArgs } from "./UpdateStocksArgs";
import { DeleteStocksArgs } from "./DeleteStocksArgs";
import { StocksService } from "../stocks.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Stocks)
export class StocksResolverBase {
  constructor(
    protected readonly service: StocksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Stocks",
    action: "read",
    possession: "any",
  })
  async _stocksItemsMeta(
    @graphql.Args() args: StocksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Stocks])
  @nestAccessControl.UseRoles({
    resource: "Stocks",
    action: "read",
    possession: "any",
  })
  async stocksItems(
    @graphql.Args() args: StocksFindManyArgs
  ): Promise<Stocks[]> {
    return this.service.stocksItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Stocks, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Stocks",
    action: "read",
    possession: "own",
  })
  async stocks(
    @graphql.Args() args: StocksFindUniqueArgs
  ): Promise<Stocks | null> {
    const result = await this.service.stocks(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Stocks)
  @nestAccessControl.UseRoles({
    resource: "Stocks",
    action: "create",
    possession: "any",
  })
  async createStocks(@graphql.Args() args: CreateStocksArgs): Promise<Stocks> {
    return await this.service.createStocks({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Stocks)
  @nestAccessControl.UseRoles({
    resource: "Stocks",
    action: "update",
    possession: "any",
  })
  async updateStocks(
    @graphql.Args() args: UpdateStocksArgs
  ): Promise<Stocks | null> {
    try {
      return await this.service.updateStocks({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Stocks)
  @nestAccessControl.UseRoles({
    resource: "Stocks",
    action: "delete",
    possession: "any",
  })
  async deleteStocks(
    @graphql.Args() args: DeleteStocksArgs
  ): Promise<Stocks | null> {
    try {
      return await this.service.deleteStocks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
