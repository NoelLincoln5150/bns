/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProductsService } from "../products.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProductsCreateInput } from "./ProductsCreateInput";
import { Products } from "./Products";
import { ProductsFindManyArgs } from "./ProductsFindManyArgs";
import { ProductsWhereUniqueInput } from "./ProductsWhereUniqueInput";
import { ProductsUpdateInput } from "./ProductsUpdateInput";
import { CategoryProductFindManyArgs } from "../../categoryProduct/base/CategoryProductFindManyArgs";
import { CategoryProduct } from "../../categoryProduct/base/CategoryProduct";
import { CategoryProductWhereUniqueInput } from "../../categoryProduct/base/CategoryProductWhereUniqueInput";
import { ProductListsFindManyArgs } from "../../productLists/base/ProductListsFindManyArgs";
import { ProductLists } from "../../productLists/base/ProductLists";
import { ProductListsWhereUniqueInput } from "../../productLists/base/ProductListsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProductsControllerBase {
  constructor(
    protected readonly service: ProductsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Products })
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ProductsCreateInput,
  })
  async createProducts(
    @common.Body() data: ProductsCreateInput
  ): Promise<Products> {
    return await this.service.createProducts({
      data: data,
      select: {
        barcode: true,
        createdAt: true,
        deletedAt: true,
        description: true,
        id: true,
        isSerialized: true,
        lowStockWarning: true,
        minimumOrderQuantity: true,
        name: true,
        price: true,
        quantity: true,
        stockTakePeriod: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Products] })
  @ApiNestedQuery(ProductsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async productsItems(@common.Req() request: Request): Promise<Products[]> {
    const args = plainToClass(ProductsFindManyArgs, request.query);
    return this.service.productsItems({
      ...args,
      select: {
        barcode: true,
        createdAt: true,
        deletedAt: true,
        description: true,
        id: true,
        isSerialized: true,
        lowStockWarning: true,
        minimumOrderQuantity: true,
        name: true,
        price: true,
        quantity: true,
        stockTakePeriod: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Products })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async products(
    @common.Param() params: ProductsWhereUniqueInput
  ): Promise<Products | null> {
    const result = await this.service.products({
      where: params,
      select: {
        barcode: true,
        createdAt: true,
        deletedAt: true,
        description: true,
        id: true,
        isSerialized: true,
        lowStockWarning: true,
        minimumOrderQuantity: true,
        name: true,
        price: true,
        quantity: true,
        stockTakePeriod: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Products })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ProductsUpdateInput,
  })
  async updateProducts(
    @common.Param() params: ProductsWhereUniqueInput,
    @common.Body() data: ProductsUpdateInput
  ): Promise<Products | null> {
    try {
      return await this.service.updateProducts({
        where: params,
        data: data,
        select: {
          barcode: true,
          createdAt: true,
          deletedAt: true,
          description: true,
          id: true,
          isSerialized: true,
          lowStockWarning: true,
          minimumOrderQuantity: true,
          name: true,
          price: true,
          quantity: true,
          stockTakePeriod: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Products })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProducts(
    @common.Param() params: ProductsWhereUniqueInput
  ): Promise<Products | null> {
    try {
      return await this.service.deleteProducts({
        where: params,
        select: {
          barcode: true,
          createdAt: true,
          deletedAt: true,
          description: true,
          id: true,
          isSerialized: true,
          lowStockWarning: true,
          minimumOrderQuantity: true,
          name: true,
          price: true,
          quantity: true,
          stockTakePeriod: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/categoryProducts")
  @ApiNestedQuery(CategoryProductFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CategoryProduct",
    action: "read",
    possession: "any",
  })
  async findCategoryProducts(
    @common.Req() request: Request,
    @common.Param() params: ProductsWhereUniqueInput
  ): Promise<CategoryProduct[]> {
    const query = plainToClass(CategoryProductFindManyArgs, request.query);
    const results = await this.service.findCategoryProducts(params.id, {
      ...query,
      select: {
        categoryId: true,
        createdAt: true,
        id: true,

        productI: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/categoryProducts")
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "update",
    possession: "any",
  })
  async connectCategoryProducts(
    @common.Param() params: ProductsWhereUniqueInput,
    @common.Body() body: CategoryProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categoryProducts: {
        connect: body,
      },
    };
    await this.service.updateProducts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/categoryProducts")
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "update",
    possession: "any",
  })
  async updateCategoryProducts(
    @common.Param() params: ProductsWhereUniqueInput,
    @common.Body() body: CategoryProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categoryProducts: {
        set: body,
      },
    };
    await this.service.updateProducts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/categoryProducts")
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "update",
    possession: "any",
  })
  async disconnectCategoryProducts(
    @common.Param() params: ProductsWhereUniqueInput,
    @common.Body() body: CategoryProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categoryProducts: {
        disconnect: body,
      },
    };
    await this.service.updateProducts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productListsItems")
  @ApiNestedQuery(ProductListsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductLists",
    action: "read",
    possession: "any",
  })
  async findProductListsItems(
    @common.Req() request: Request,
    @common.Param() params: ProductsWhereUniqueInput
  ): Promise<ProductLists[]> {
    const query = plainToClass(ProductListsFindManyArgs, request.query);
    const results = await this.service.findProductListsItems(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        deletedAt: true,
        id: true,
        inStock: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productListsItems")
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "update",
    possession: "any",
  })
  async connectProductListsItems(
    @common.Param() params: ProductsWhereUniqueInput,
    @common.Body() body: ProductListsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productListsItems: {
        connect: body,
      },
    };
    await this.service.updateProducts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productListsItems")
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "update",
    possession: "any",
  })
  async updateProductListsItems(
    @common.Param() params: ProductsWhereUniqueInput,
    @common.Body() body: ProductListsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productListsItems: {
        set: body,
      },
    };
    await this.service.updateProducts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productListsItems")
  @nestAccessControl.UseRoles({
    resource: "Products",
    action: "update",
    possession: "any",
  })
  async disconnectProductListsItems(
    @common.Param() params: ProductsWhereUniqueInput,
    @common.Body() body: ProductListsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productListsItems: {
        disconnect: body,
      },
    };
    await this.service.updateProducts({
      where: params,
      data,
      select: { id: true },
    });
  }
}
