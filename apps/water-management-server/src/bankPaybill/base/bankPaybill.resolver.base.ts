/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BankPaybill } from "./BankPaybill";
import { BankPaybillCountArgs } from "./BankPaybillCountArgs";
import { BankPaybillFindManyArgs } from "./BankPaybillFindManyArgs";
import { BankPaybillFindUniqueArgs } from "./BankPaybillFindUniqueArgs";
import { CreateBankPaybillArgs } from "./CreateBankPaybillArgs";
import { UpdateBankPaybillArgs } from "./UpdateBankPaybillArgs";
import { DeleteBankPaybillArgs } from "./DeleteBankPaybillArgs";
import { BankPaybillService } from "../bankPaybill.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BankPaybill)
export class BankPaybillResolverBase {
  constructor(
    protected readonly service: BankPaybillService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BankPaybill",
    action: "read",
    possession: "any",
  })
  async _bankPaybillsMeta(
    @graphql.Args() args: BankPaybillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BankPaybill])
  @nestAccessControl.UseRoles({
    resource: "BankPaybill",
    action: "read",
    possession: "any",
  })
  async bankPaybills(
    @graphql.Args() args: BankPaybillFindManyArgs
  ): Promise<BankPaybill[]> {
    return this.service.bankPaybills(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BankPaybill, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BankPaybill",
    action: "read",
    possession: "own",
  })
  async bankPaybill(
    @graphql.Args() args: BankPaybillFindUniqueArgs
  ): Promise<BankPaybill | null> {
    const result = await this.service.bankPaybill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BankPaybill)
  @nestAccessControl.UseRoles({
    resource: "BankPaybill",
    action: "create",
    possession: "any",
  })
  async createBankPaybill(
    @graphql.Args() args: CreateBankPaybillArgs
  ): Promise<BankPaybill> {
    return await this.service.createBankPaybill({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BankPaybill)
  @nestAccessControl.UseRoles({
    resource: "BankPaybill",
    action: "update",
    possession: "any",
  })
  async updateBankPaybill(
    @graphql.Args() args: UpdateBankPaybillArgs
  ): Promise<BankPaybill | null> {
    try {
      return await this.service.updateBankPaybill({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BankPaybill)
  @nestAccessControl.UseRoles({
    resource: "BankPaybill",
    action: "delete",
    possession: "any",
  })
  async deleteBankPaybill(
    @graphql.Args() args: DeleteBankPaybillArgs
  ): Promise<BankPaybill | null> {
    try {
      return await this.service.deleteBankPaybill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
