/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CustomersService } from "../customers.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CustomersCreateInput } from "./CustomersCreateInput";
import { Customers } from "./Customers";
import { CustomersFindManyArgs } from "./CustomersFindManyArgs";
import { CustomersWhereUniqueInput } from "./CustomersWhereUniqueInput";
import { CustomersUpdateInput } from "./CustomersUpdateInput";
import { B2bTransactionsFindManyArgs } from "../../b2bTransactions/base/B2bTransactionsFindManyArgs";
import { B2bTransactions } from "../../b2bTransactions/base/B2bTransactions";
import { B2bTransactionsWhereUniqueInput } from "../../b2bTransactions/base/B2bTransactionsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CustomersControllerBase {
  constructor(
    protected readonly service: CustomersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Customers })
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCustomers(
    @common.Body() data: CustomersCreateInput
  ): Promise<Customers> {
    return await this.service.createCustomers({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Customers] })
  @ApiNestedQuery(CustomersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customersItems(@common.Req() request: Request): Promise<Customers[]> {
    const args = plainToClass(CustomersFindManyArgs, request.query);
    return this.service.customersItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Customers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customers(
    @common.Param() params: CustomersWhereUniqueInput
  ): Promise<Customers | null> {
    const result = await this.service.customers({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Customers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCustomers(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() data: CustomersUpdateInput
  ): Promise<Customers | null> {
    try {
      return await this.service.updateCustomers({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Customers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCustomers(
    @common.Param() params: CustomersWhereUniqueInput
  ): Promise<Customers | null> {
    try {
      return await this.service.deleteCustomers({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/b2bTransactionsItems")
  @ApiNestedQuery(B2bTransactionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "B2bTransactions",
    action: "read",
    possession: "any",
  })
  async findB2bTransactionsItems(
    @common.Req() request: Request,
    @common.Param() params: CustomersWhereUniqueInput
  ): Promise<B2bTransactions[]> {
    const query = plainToClass(B2bTransactionsFindManyArgs, request.query);
    const results = await this.service.findB2bTransactionsItems(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        paymentAccount: {
          select: {
            id: true,
          },
        },

        status: true,
        transactionDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/b2bTransactionsItems")
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "update",
    possession: "any",
  })
  async connectB2bTransactionsItems(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() body: B2bTransactionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      b2bTransactionsItems: {
        connect: body,
      },
    };
    await this.service.updateCustomers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/b2bTransactionsItems")
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "update",
    possession: "any",
  })
  async updateB2bTransactionsItems(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() body: B2bTransactionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      b2bTransactionsItems: {
        set: body,
      },
    };
    await this.service.updateCustomers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/b2bTransactionsItems")
  @nestAccessControl.UseRoles({
    resource: "Customers",
    action: "update",
    possession: "any",
  })
  async disconnectB2bTransactionsItems(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() body: B2bTransactionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      b2bTransactionsItems: {
        disconnect: body,
      },
    };
    await this.service.updateCustomers({
      where: params,
      data,
      select: { id: true },
    });
  }
}
