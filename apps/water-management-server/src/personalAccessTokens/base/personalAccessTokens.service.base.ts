/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PersonalAccessTokens as PrismaPersonalAccessTokens,
} from "@prisma/client";

export class PersonalAccessTokensServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PersonalAccessTokensCountArgs, "select">
  ): Promise<number> {
    return this.prisma.personalAccessTokens.count(args);
  }

  async personalAccessTokensItems(
    args: Prisma.PersonalAccessTokensFindManyArgs
  ): Promise<PrismaPersonalAccessTokens[]> {
    return this.prisma.personalAccessTokens.findMany(args);
  }
  async personalAccessTokens(
    args: Prisma.PersonalAccessTokensFindUniqueArgs
  ): Promise<PrismaPersonalAccessTokens | null> {
    return this.prisma.personalAccessTokens.findUnique(args);
  }
  async createPersonalAccessTokens(
    args: Prisma.PersonalAccessTokensCreateArgs
  ): Promise<PrismaPersonalAccessTokens> {
    return this.prisma.personalAccessTokens.create(args);
  }
  async updatePersonalAccessTokens(
    args: Prisma.PersonalAccessTokensUpdateArgs
  ): Promise<PrismaPersonalAccessTokens> {
    return this.prisma.personalAccessTokens.update(args);
  }
  async deletePersonalAccessTokens(
    args: Prisma.PersonalAccessTokensDeleteArgs
  ): Promise<PrismaPersonalAccessTokens> {
    return this.prisma.personalAccessTokens.delete(args);
  }
}
