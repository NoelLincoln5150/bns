/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Taxables } from "./Taxables";
import { TaxablesCountArgs } from "./TaxablesCountArgs";
import { TaxablesFindManyArgs } from "./TaxablesFindManyArgs";
import { TaxablesFindUniqueArgs } from "./TaxablesFindUniqueArgs";
import { CreateTaxablesArgs } from "./CreateTaxablesArgs";
import { UpdateTaxablesArgs } from "./UpdateTaxablesArgs";
import { DeleteTaxablesArgs } from "./DeleteTaxablesArgs";
import { TaxablesService } from "../taxables.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Taxables)
export class TaxablesResolverBase {
  constructor(
    protected readonly service: TaxablesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Taxables",
    action: "read",
    possession: "any",
  })
  async _taxablesItemsMeta(
    @graphql.Args() args: TaxablesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Taxables])
  @nestAccessControl.UseRoles({
    resource: "Taxables",
    action: "read",
    possession: "any",
  })
  async taxablesItems(
    @graphql.Args() args: TaxablesFindManyArgs
  ): Promise<Taxables[]> {
    return this.service.taxablesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Taxables, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Taxables",
    action: "read",
    possession: "own",
  })
  async taxables(
    @graphql.Args() args: TaxablesFindUniqueArgs
  ): Promise<Taxables | null> {
    const result = await this.service.taxables(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Taxables)
  @nestAccessControl.UseRoles({
    resource: "Taxables",
    action: "create",
    possession: "any",
  })
  async createTaxables(
    @graphql.Args() args: CreateTaxablesArgs
  ): Promise<Taxables> {
    return await this.service.createTaxables({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Taxables)
  @nestAccessControl.UseRoles({
    resource: "Taxables",
    action: "update",
    possession: "any",
  })
  async updateTaxables(
    @graphql.Args() args: UpdateTaxablesArgs
  ): Promise<Taxables | null> {
    try {
      return await this.service.updateTaxables({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Taxables)
  @nestAccessControl.UseRoles({
    resource: "Taxables",
    action: "delete",
    possession: "any",
  })
  async deleteTaxables(
    @graphql.Args() args: DeleteTaxablesArgs
  ): Promise<Taxables | null> {
    try {
      return await this.service.deleteTaxables(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
