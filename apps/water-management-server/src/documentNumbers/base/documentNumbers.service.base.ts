/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DocumentNumbers as PrismaDocumentNumbers,
} from "@prisma/client";

export class DocumentNumbersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DocumentNumbersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.documentNumbers.count(args);
  }

  async documentNumbersItems(
    args: Prisma.DocumentNumbersFindManyArgs
  ): Promise<PrismaDocumentNumbers[]> {
    return this.prisma.documentNumbers.findMany(args);
  }
  async documentNumbers(
    args: Prisma.DocumentNumbersFindUniqueArgs
  ): Promise<PrismaDocumentNumbers | null> {
    return this.prisma.documentNumbers.findUnique(args);
  }
  async createDocumentNumbers(
    args: Prisma.DocumentNumbersCreateArgs
  ): Promise<PrismaDocumentNumbers> {
    return this.prisma.documentNumbers.create(args);
  }
  async updateDocumentNumbers(
    args: Prisma.DocumentNumbersUpdateArgs
  ): Promise<PrismaDocumentNumbers> {
    return this.prisma.documentNumbers.update(args);
  }
  async deleteDocumentNumbers(
    args: Prisma.DocumentNumbersDeleteArgs
  ): Promise<PrismaDocumentNumbers> {
    return this.prisma.documentNumbers.delete(args);
  }
}
