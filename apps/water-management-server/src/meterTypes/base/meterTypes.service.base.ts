/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MeterTypes as PrismaMeterTypes,
  Meter as PrismaMeter,
} from "@prisma/client";

export class MeterTypesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MeterTypesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.meterTypes.count(args);
  }

  async meterTypesItems(
    args: Prisma.MeterTypesFindManyArgs
  ): Promise<PrismaMeterTypes[]> {
    return this.prisma.meterTypes.findMany(args);
  }
  async meterTypes(
    args: Prisma.MeterTypesFindUniqueArgs
  ): Promise<PrismaMeterTypes | null> {
    return this.prisma.meterTypes.findUnique(args);
  }
  async createMeterTypes(
    args: Prisma.MeterTypesCreateArgs
  ): Promise<PrismaMeterTypes> {
    return this.prisma.meterTypes.create(args);
  }
  async updateMeterTypes(
    args: Prisma.MeterTypesUpdateArgs
  ): Promise<PrismaMeterTypes> {
    return this.prisma.meterTypes.update(args);
  }
  async deleteMeterTypes(
    args: Prisma.MeterTypesDeleteArgs
  ): Promise<PrismaMeterTypes> {
    return this.prisma.meterTypes.delete(args);
  }

  async findMeters(
    parentId: string,
    args: Prisma.MeterFindManyArgs
  ): Promise<PrismaMeter[]> {
    return this.prisma.meterTypes
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .meters(args);
  }
}
