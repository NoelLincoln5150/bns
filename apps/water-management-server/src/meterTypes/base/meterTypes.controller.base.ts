/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MeterTypesService } from "../meterTypes.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MeterTypesCreateInput } from "./MeterTypesCreateInput";
import { MeterTypes } from "./MeterTypes";
import { MeterTypesFindManyArgs } from "./MeterTypesFindManyArgs";
import { MeterTypesWhereUniqueInput } from "./MeterTypesWhereUniqueInput";
import { MeterTypesUpdateInput } from "./MeterTypesUpdateInput";
import { MeterFindManyArgs } from "../../meter/base/MeterFindManyArgs";
import { Meter } from "../../meter/base/Meter";
import { MeterWhereUniqueInput } from "../../meter/base/MeterWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MeterTypesControllerBase {
  constructor(
    protected readonly service: MeterTypesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MeterTypes })
  @nestAccessControl.UseRoles({
    resource: "MeterTypes",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: MeterTypesCreateInput,
  })
  async createMeterTypes(
    @common.Body() data: MeterTypesCreateInput
  ): Promise<MeterTypes> {
    return await this.service.createMeterTypes({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MeterTypes] })
  @ApiNestedQuery(MeterTypesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MeterTypes",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async meterTypesItems(@common.Req() request: Request): Promise<MeterTypes[]> {
    const args = plainToClass(MeterTypesFindManyArgs, request.query);
    return this.service.meterTypesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MeterTypes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MeterTypes",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async meterTypes(
    @common.Param() params: MeterTypesWhereUniqueInput
  ): Promise<MeterTypes | null> {
    const result = await this.service.meterTypes({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MeterTypes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MeterTypes",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: MeterTypesUpdateInput,
  })
  async updateMeterTypes(
    @common.Param() params: MeterTypesWhereUniqueInput,
    @common.Body() data: MeterTypesUpdateInput
  ): Promise<MeterTypes | null> {
    try {
      return await this.service.updateMeterTypes({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MeterTypes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MeterTypes",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMeterTypes(
    @common.Param() params: MeterTypesWhereUniqueInput
  ): Promise<MeterTypes | null> {
    try {
      return await this.service.deleteMeterTypes({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/meters")
  @ApiNestedQuery(MeterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Meter",
    action: "read",
    possession: "any",
  })
  async findMeters(
    @common.Req() request: Request,
    @common.Param() params: MeterTypesWhereUniqueInput
  ): Promise<Meter[]> {
    const query = plainToClass(MeterFindManyArgs, request.query);
    const results = await this.service.findMeters(params.id, {
      ...query,
      select: {
        coordinates: true,
        createdAt: true,
        id: true,
        installationDate: true,

        meterType: {
          select: {
            id: true,
          },
        },

        status: true,
        tokenBalance: true,
        updatedAt: true,

        usages: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/meters")
  @nestAccessControl.UseRoles({
    resource: "MeterTypes",
    action: "update",
    possession: "any",
  })
  async connectMeters(
    @common.Param() params: MeterTypesWhereUniqueInput,
    @common.Body() body: MeterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      meters: {
        connect: body,
      },
    };
    await this.service.updateMeterTypes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/meters")
  @nestAccessControl.UseRoles({
    resource: "MeterTypes",
    action: "update",
    possession: "any",
  })
  async updateMeters(
    @common.Param() params: MeterTypesWhereUniqueInput,
    @common.Body() body: MeterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      meters: {
        set: body,
      },
    };
    await this.service.updateMeterTypes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/meters")
  @nestAccessControl.UseRoles({
    resource: "MeterTypes",
    action: "update",
    possession: "any",
  })
  async disconnectMeters(
    @common.Param() params: MeterTypesWhereUniqueInput,
    @common.Body() body: MeterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      meters: {
        disconnect: body,
      },
    };
    await this.service.updateMeterTypes({
      where: params,
      data,
      select: { id: true },
    });
  }
}
