/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RevenueShares } from "./RevenueShares";
import { RevenueSharesCountArgs } from "./RevenueSharesCountArgs";
import { RevenueSharesFindManyArgs } from "./RevenueSharesFindManyArgs";
import { RevenueSharesFindUniqueArgs } from "./RevenueSharesFindUniqueArgs";
import { CreateRevenueSharesArgs } from "./CreateRevenueSharesArgs";
import { UpdateRevenueSharesArgs } from "./UpdateRevenueSharesArgs";
import { DeleteRevenueSharesArgs } from "./DeleteRevenueSharesArgs";
import { RevenueSharesService } from "../revenueShares.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RevenueShares)
export class RevenueSharesResolverBase {
  constructor(
    protected readonly service: RevenueSharesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RevenueShares",
    action: "read",
    possession: "any",
  })
  async _revenueSharesItemsMeta(
    @graphql.Args() args: RevenueSharesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RevenueShares])
  @nestAccessControl.UseRoles({
    resource: "RevenueShares",
    action: "read",
    possession: "any",
  })
  async revenueSharesItems(
    @graphql.Args() args: RevenueSharesFindManyArgs
  ): Promise<RevenueShares[]> {
    return this.service.revenueSharesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RevenueShares, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RevenueShares",
    action: "read",
    possession: "own",
  })
  async revenueShares(
    @graphql.Args() args: RevenueSharesFindUniqueArgs
  ): Promise<RevenueShares | null> {
    const result = await this.service.revenueShares(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RevenueShares)
  @nestAccessControl.UseRoles({
    resource: "RevenueShares",
    action: "create",
    possession: "any",
  })
  async createRevenueShares(
    @graphql.Args() args: CreateRevenueSharesArgs
  ): Promise<RevenueShares> {
    return await this.service.createRevenueShares({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RevenueShares)
  @nestAccessControl.UseRoles({
    resource: "RevenueShares",
    action: "update",
    possession: "any",
  })
  async updateRevenueShares(
    @graphql.Args() args: UpdateRevenueSharesArgs
  ): Promise<RevenueShares | null> {
    try {
      return await this.service.updateRevenueShares({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RevenueShares)
  @nestAccessControl.UseRoles({
    resource: "RevenueShares",
    action: "delete",
    possession: "any",
  })
  async deleteRevenueShares(
    @graphql.Args() args: DeleteRevenueSharesArgs
  ): Promise<RevenueShares | null> {
    try {
      return await this.service.deleteRevenueShares(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
