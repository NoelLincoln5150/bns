/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Suppliers } from "./Suppliers";
import { SuppliersCountArgs } from "./SuppliersCountArgs";
import { SuppliersFindManyArgs } from "./SuppliersFindManyArgs";
import { SuppliersFindUniqueArgs } from "./SuppliersFindUniqueArgs";
import { DeleteSuppliersArgs } from "./DeleteSuppliersArgs";
import { SuppliersService } from "../suppliers.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Suppliers)
export class SuppliersResolverBase {
  constructor(
    protected readonly service: SuppliersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "read",
    possession: "any",
  })
  async _suppliersItemsMeta(
    @graphql.Args() args: SuppliersCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Suppliers])
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "read",
    possession: "any",
  })
  async suppliersItems(
    @graphql.Args() args: SuppliersFindManyArgs
  ): Promise<Suppliers[]> {
    return this.service.suppliersItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Suppliers, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "read",
    possession: "own",
  })
  async suppliers(
    @graphql.Args() args: SuppliersFindUniqueArgs
  ): Promise<Suppliers | null> {
    const result = await this.service.suppliers(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Suppliers)
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "delete",
    possession: "any",
  })
  async deleteSuppliers(
    @graphql.Args() args: DeleteSuppliersArgs
  ): Promise<Suppliers | null> {
    try {
      return await this.service.deleteSuppliers(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
