/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Suppliers as PrismaSuppliers,
  Contract as PrismaContract,
} from "@prisma/client";

export class SuppliersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SuppliersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.suppliers.count(args);
  }

  async suppliersItems(
    args: Prisma.SuppliersFindManyArgs
  ): Promise<PrismaSuppliers[]> {
    return this.prisma.suppliers.findMany(args);
  }
  async suppliers(
    args: Prisma.SuppliersFindUniqueArgs
  ): Promise<PrismaSuppliers | null> {
    return this.prisma.suppliers.findUnique(args);
  }
  async createSuppliers(
    args: Prisma.SuppliersCreateArgs
  ): Promise<PrismaSuppliers> {
    return this.prisma.suppliers.create(args);
  }
  async updateSuppliers(
    args: Prisma.SuppliersUpdateArgs
  ): Promise<PrismaSuppliers> {
    return this.prisma.suppliers.update(args);
  }
  async deleteSuppliers(
    args: Prisma.SuppliersDeleteArgs
  ): Promise<PrismaSuppliers> {
    return this.prisma.suppliers.delete(args);
  }

  async findContracts(
    parentId: string,
    args: Prisma.ContractFindManyArgs
  ): Promise<PrismaContract[]> {
    return this.prisma.suppliers
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .contracts(args);
  }
}
