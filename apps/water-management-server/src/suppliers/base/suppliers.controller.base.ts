/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SuppliersService } from "../suppliers.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SuppliersCreateInput } from "./SuppliersCreateInput";
import { Suppliers } from "./Suppliers";
import { SuppliersFindManyArgs } from "./SuppliersFindManyArgs";
import { SuppliersWhereUniqueInput } from "./SuppliersWhereUniqueInput";
import { SuppliersUpdateInput } from "./SuppliersUpdateInput";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractWhereUniqueInput } from "../../contract/base/ContractWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SuppliersControllerBase {
  constructor(
    protected readonly service: SuppliersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Suppliers })
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: SuppliersCreateInput,
  })
  async createSuppliers(
    @common.Body() data: SuppliersCreateInput
  ): Promise<Suppliers> {
    return await this.service.createSuppliers({
      data: data,
      select: {
        createdAt: true,
        deletedAt: true,
        id: true,
        name: true,
        numberField: true,
        taxNumber: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Suppliers] })
  @ApiNestedQuery(SuppliersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async suppliersItems(@common.Req() request: Request): Promise<Suppliers[]> {
    const args = plainToClass(SuppliersFindManyArgs, request.query);
    return this.service.suppliersItems({
      ...args,
      select: {
        createdAt: true,
        deletedAt: true,
        id: true,
        name: true,
        numberField: true,
        taxNumber: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Suppliers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async suppliers(
    @common.Param() params: SuppliersWhereUniqueInput
  ): Promise<Suppliers | null> {
    const result = await this.service.suppliers({
      where: params,
      select: {
        createdAt: true,
        deletedAt: true,
        id: true,
        name: true,
        numberField: true,
        taxNumber: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Suppliers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: SuppliersUpdateInput,
  })
  async updateSuppliers(
    @common.Param() params: SuppliersWhereUniqueInput,
    @common.Body() data: SuppliersUpdateInput
  ): Promise<Suppliers | null> {
    try {
      return await this.service.updateSuppliers({
        where: params,
        data: data,
        select: {
          createdAt: true,
          deletedAt: true,
          id: true,
          name: true,
          numberField: true,
          taxNumber: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Suppliers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSuppliers(
    @common.Param() params: SuppliersWhereUniqueInput
  ): Promise<Suppliers | null> {
    try {
      return await this.service.deleteSuppliers({
        where: params,
        select: {
          createdAt: true,
          deletedAt: true,
          id: true,
          name: true,
          numberField: true,
          taxNumber: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/contracts")
  @ApiNestedQuery(ContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @common.Req() request: Request,
    @common.Param() params: SuppliersWhereUniqueInput
  ): Promise<Contract[]> {
    const query = plainToClass(ContractFindManyArgs, request.query);
    const results = await this.service.findContracts(params.id, {
      ...query,
      select: {
        approved: true,
        createdAt: true,
        id: true,
        numberField: true,
        pricePerUnit: true,
        status: true,

        supplierNumber: {
          select: {
            id: true,
          },
        },

        titlle: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "update",
    possession: "any",
  })
  async connectContracts(
    @common.Param() params: SuppliersWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        connect: body,
      },
    };
    await this.service.updateSuppliers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "update",
    possession: "any",
  })
  async updateContracts(
    @common.Param() params: SuppliersWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        set: body,
      },
    };
    await this.service.updateSuppliers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Suppliers",
    action: "update",
    possession: "any",
  })
  async disconnectContracts(
    @common.Param() params: SuppliersWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        disconnect: body,
      },
    };
    await this.service.updateSuppliers({
      where: params,
      data,
      select: { id: true },
    });
  }
}
