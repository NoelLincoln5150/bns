/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WaterSources as PrismaWaterSources } from "@prisma/client";

export class WaterSourcesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WaterSourcesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.waterSources.count(args);
  }

  async waterSourcesItems(
    args: Prisma.WaterSourcesFindManyArgs
  ): Promise<PrismaWaterSources[]> {
    return this.prisma.waterSources.findMany(args);
  }
  async waterSources(
    args: Prisma.WaterSourcesFindUniqueArgs
  ): Promise<PrismaWaterSources | null> {
    return this.prisma.waterSources.findUnique(args);
  }
  async createWaterSources(
    args: Prisma.WaterSourcesCreateArgs
  ): Promise<PrismaWaterSources> {
    return this.prisma.waterSources.create(args);
  }
  async updateWaterSources(
    args: Prisma.WaterSourcesUpdateArgs
  ): Promise<PrismaWaterSources> {
    return this.prisma.waterSources.update(args);
  }
  async deleteWaterSources(
    args: Prisma.WaterSourcesDeleteArgs
  ): Promise<PrismaWaterSources> {
    return this.prisma.waterSources.delete(args);
  }
}
