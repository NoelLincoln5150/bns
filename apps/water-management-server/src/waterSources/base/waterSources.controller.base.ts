/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { WaterSourcesService } from "../waterSources.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WaterSourcesCreateInput } from "./WaterSourcesCreateInput";
import { WaterSources } from "./WaterSources";
import { WaterSourcesFindManyArgs } from "./WaterSourcesFindManyArgs";
import { WaterSourcesWhereUniqueInput } from "./WaterSourcesWhereUniqueInput";
import { WaterSourcesUpdateInput } from "./WaterSourcesUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WaterSourcesControllerBase {
  constructor(
    protected readonly service: WaterSourcesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WaterSources })
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createWaterSources(
    @common.Body() data: WaterSourcesCreateInput
  ): Promise<WaterSources> {
    return await this.service.createWaterSources({
      data: data,
      select: {
        county: true,
        createdAt: true,
        deletedAt: true,
        elevation: true,
        id: true,
        latitude: true,
        localAddress: true,
        longitude: true,
        name: true,
        numberField: true,
        region: true,
        subCounty: true,
        supplierNumber: true,
        town: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [WaterSources] })
  @ApiNestedQuery(WaterSourcesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async waterSourcesItems(
    @common.Req() request: Request
  ): Promise<WaterSources[]> {
    const args = plainToClass(WaterSourcesFindManyArgs, request.query);
    return this.service.waterSourcesItems({
      ...args,
      select: {
        county: true,
        createdAt: true,
        deletedAt: true,
        elevation: true,
        id: true,
        latitude: true,
        localAddress: true,
        longitude: true,
        name: true,
        numberField: true,
        region: true,
        subCounty: true,
        supplierNumber: true,
        town: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WaterSources })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async waterSources(
    @common.Param() params: WaterSourcesWhereUniqueInput
  ): Promise<WaterSources | null> {
    const result = await this.service.waterSources({
      where: params,
      select: {
        county: true,
        createdAt: true,
        deletedAt: true,
        elevation: true,
        id: true,
        latitude: true,
        localAddress: true,
        longitude: true,
        name: true,
        numberField: true,
        region: true,
        subCounty: true,
        supplierNumber: true,
        town: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WaterSources })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateWaterSources(
    @common.Param() params: WaterSourcesWhereUniqueInput,
    @common.Body() data: WaterSourcesUpdateInput
  ): Promise<WaterSources | null> {
    try {
      return await this.service.updateWaterSources({
        where: params,
        data: data,
        select: {
          county: true,
          createdAt: true,
          deletedAt: true,
          elevation: true,
          id: true,
          latitude: true,
          localAddress: true,
          longitude: true,
          name: true,
          numberField: true,
          region: true,
          subCounty: true,
          supplierNumber: true,
          town: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WaterSources })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWaterSources(
    @common.Param() params: WaterSourcesWhereUniqueInput
  ): Promise<WaterSources | null> {
    try {
      return await this.service.deleteWaterSources({
        where: params,
        select: {
          county: true,
          createdAt: true,
          deletedAt: true,
          elevation: true,
          id: true,
          latitude: true,
          localAddress: true,
          longitude: true,
          name: true,
          numberField: true,
          region: true,
          subCounty: true,
          supplierNumber: true,
          town: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
