/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WaterSources } from "./WaterSources";
import { WaterSourcesCountArgs } from "./WaterSourcesCountArgs";
import { WaterSourcesFindManyArgs } from "./WaterSourcesFindManyArgs";
import { WaterSourcesFindUniqueArgs } from "./WaterSourcesFindUniqueArgs";
import { CreateWaterSourcesArgs } from "./CreateWaterSourcesArgs";
import { UpdateWaterSourcesArgs } from "./UpdateWaterSourcesArgs";
import { DeleteWaterSourcesArgs } from "./DeleteWaterSourcesArgs";
import { PremisesWaterSourceFindManyArgs } from "../../premisesWaterSource/base/PremisesWaterSourceFindManyArgs";
import { PremisesWaterSource } from "../../premisesWaterSource/base/PremisesWaterSource";
import { WaterSourcesService } from "../waterSources.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WaterSources)
export class WaterSourcesResolverBase {
  constructor(
    protected readonly service: WaterSourcesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "read",
    possession: "any",
  })
  async _waterSourcesItemsMeta(
    @graphql.Args() args: WaterSourcesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WaterSources])
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "read",
    possession: "any",
  })
  async waterSourcesItems(
    @graphql.Args() args: WaterSourcesFindManyArgs
  ): Promise<WaterSources[]> {
    return this.service.waterSourcesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WaterSources, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "read",
    possession: "own",
  })
  async waterSources(
    @graphql.Args() args: WaterSourcesFindUniqueArgs
  ): Promise<WaterSources | null> {
    const result = await this.service.waterSources(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WaterSources)
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "create",
    possession: "any",
  })
  async createWaterSources(
    @graphql.Args() args: CreateWaterSourcesArgs
  ): Promise<WaterSources> {
    return await this.service.createWaterSources({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WaterSources)
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "update",
    possession: "any",
  })
  async updateWaterSources(
    @graphql.Args() args: UpdateWaterSourcesArgs
  ): Promise<WaterSources | null> {
    try {
      return await this.service.updateWaterSources({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WaterSources)
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "delete",
    possession: "any",
  })
  async deleteWaterSources(
    @graphql.Args() args: DeleteWaterSourcesArgs
  ): Promise<WaterSources | null> {
    try {
      return await this.service.deleteWaterSources(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PremisesWaterSource], {
    name: "premisesWaterSources",
  })
  @nestAccessControl.UseRoles({
    resource: "PremisesWaterSource",
    action: "read",
    possession: "any",
  })
  async findPremisesWaterSources(
    @graphql.Parent() parent: WaterSources,
    @graphql.Args() args: PremisesWaterSourceFindManyArgs
  ): Promise<PremisesWaterSource[]> {
    const results = await this.service.findPremisesWaterSources(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
