/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TransactionCosts as PrismaTransactionCosts,
} from "@prisma/client";

export class TransactionCostsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransactionCostsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transactionCosts.count(args);
  }

  async transactionCostsItems(
    args: Prisma.TransactionCostsFindManyArgs
  ): Promise<PrismaTransactionCosts[]> {
    return this.prisma.transactionCosts.findMany(args);
  }
  async transactionCosts(
    args: Prisma.TransactionCostsFindUniqueArgs
  ): Promise<PrismaTransactionCosts | null> {
    return this.prisma.transactionCosts.findUnique(args);
  }
  async createTransactionCosts(
    args: Prisma.TransactionCostsCreateArgs
  ): Promise<PrismaTransactionCosts> {
    return this.prisma.transactionCosts.create(args);
  }
  async updateTransactionCosts(
    args: Prisma.TransactionCostsUpdateArgs
  ): Promise<PrismaTransactionCosts> {
    return this.prisma.transactionCosts.update(args);
  }
  async deleteTransactionCosts(
    args: Prisma.TransactionCostsDeleteArgs
  ): Promise<PrismaTransactionCosts> {
    return this.prisma.transactionCosts.delete(args);
  }
}
