/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TransactionCosts } from "./TransactionCosts";
import { TransactionCostsCountArgs } from "./TransactionCostsCountArgs";
import { TransactionCostsFindManyArgs } from "./TransactionCostsFindManyArgs";
import { TransactionCostsFindUniqueArgs } from "./TransactionCostsFindUniqueArgs";
import { CreateTransactionCostsArgs } from "./CreateTransactionCostsArgs";
import { UpdateTransactionCostsArgs } from "./UpdateTransactionCostsArgs";
import { DeleteTransactionCostsArgs } from "./DeleteTransactionCostsArgs";
import { TransactionCostsService } from "../transactionCosts.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TransactionCosts)
export class TransactionCostsResolverBase {
  constructor(
    protected readonly service: TransactionCostsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TransactionCosts",
    action: "read",
    possession: "any",
  })
  async _transactionCostsItemsMeta(
    @graphql.Args() args: TransactionCostsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TransactionCosts])
  @nestAccessControl.UseRoles({
    resource: "TransactionCosts",
    action: "read",
    possession: "any",
  })
  async transactionCostsItems(
    @graphql.Args() args: TransactionCostsFindManyArgs
  ): Promise<TransactionCosts[]> {
    return this.service.transactionCostsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TransactionCosts, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TransactionCosts",
    action: "read",
    possession: "own",
  })
  async transactionCosts(
    @graphql.Args() args: TransactionCostsFindUniqueArgs
  ): Promise<TransactionCosts | null> {
    const result = await this.service.transactionCosts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionCosts)
  @nestAccessControl.UseRoles({
    resource: "TransactionCosts",
    action: "create",
    possession: "any",
  })
  async createTransactionCosts(
    @graphql.Args() args: CreateTransactionCostsArgs
  ): Promise<TransactionCosts> {
    return await this.service.createTransactionCosts({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionCosts)
  @nestAccessControl.UseRoles({
    resource: "TransactionCosts",
    action: "update",
    possession: "any",
  })
  async updateTransactionCosts(
    @graphql.Args() args: UpdateTransactionCostsArgs
  ): Promise<TransactionCosts | null> {
    try {
      return await this.service.updateTransactionCosts({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TransactionCosts)
  @nestAccessControl.UseRoles({
    resource: "TransactionCosts",
    action: "delete",
    possession: "any",
  })
  async deleteTransactionCosts(
    @graphql.Args() args: DeleteTransactionCostsArgs
  ): Promise<TransactionCosts | null> {
    try {
      return await this.service.deleteTransactionCosts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
