/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PaymentAccountsService } from "../paymentAccounts.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PaymentAccountsCreateInput } from "./PaymentAccountsCreateInput";
import { PaymentAccounts } from "./PaymentAccounts";
import { PaymentAccountsFindManyArgs } from "./PaymentAccountsFindManyArgs";
import { PaymentAccountsWhereUniqueInput } from "./PaymentAccountsWhereUniqueInput";
import { PaymentAccountsUpdateInput } from "./PaymentAccountsUpdateInput";
import { B2bTransactionsFindManyArgs } from "../../b2bTransactions/base/B2bTransactionsFindManyArgs";
import { B2bTransactions } from "../../b2bTransactions/base/B2bTransactions";
import { B2bTransactionsWhereUniqueInput } from "../../b2bTransactions/base/B2bTransactionsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PaymentAccountsControllerBase {
  constructor(
    protected readonly service: PaymentAccountsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentAccounts })
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: PaymentAccountsCreateInput,
  })
  async createPaymentAccounts(
    @common.Body() data: PaymentAccountsCreateInput
  ): Promise<PaymentAccounts> {
    return await this.service.createPaymentAccounts({
      data: data,
      select: {
        createdAt: true,
        deletedAt: true,
        enabled: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentAccounts] })
  @ApiNestedQuery(PaymentAccountsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paymentAccountsItems(
    @common.Req() request: Request
  ): Promise<PaymentAccounts[]> {
    const args = plainToClass(PaymentAccountsFindManyArgs, request.query);
    return this.service.paymentAccountsItems({
      ...args,
      select: {
        createdAt: true,
        deletedAt: true,
        enabled: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentAccounts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paymentAccounts(
    @common.Param() params: PaymentAccountsWhereUniqueInput
  ): Promise<PaymentAccounts | null> {
    const result = await this.service.paymentAccounts({
      where: params,
      select: {
        createdAt: true,
        deletedAt: true,
        enabled: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentAccounts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: PaymentAccountsUpdateInput,
  })
  async updatePaymentAccounts(
    @common.Param() params: PaymentAccountsWhereUniqueInput,
    @common.Body() data: PaymentAccountsUpdateInput
  ): Promise<PaymentAccounts | null> {
    try {
      return await this.service.updatePaymentAccounts({
        where: params,
        data: data,
        select: {
          createdAt: true,
          deletedAt: true,
          enabled: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentAccounts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePaymentAccounts(
    @common.Param() params: PaymentAccountsWhereUniqueInput
  ): Promise<PaymentAccounts | null> {
    try {
      return await this.service.deletePaymentAccounts({
        where: params,
        select: {
          createdAt: true,
          deletedAt: true,
          enabled: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/b2bTransactionsItems")
  @ApiNestedQuery(B2bTransactionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "B2bTransactions",
    action: "read",
    possession: "any",
  })
  async findB2bTransactionsItems(
    @common.Req() request: Request,
    @common.Param() params: PaymentAccountsWhereUniqueInput
  ): Promise<B2bTransactions[]> {
    const query = plainToClass(B2bTransactionsFindManyArgs, request.query);
    const results = await this.service.findB2bTransactionsItems(params.id, {
      ...query,
      select: {
        amount: true,
        c2bTransactionId: true,
        completed: true,
        confirmed: true,
        contractNumber: true,
        conversationId: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        deletedAt: true,
        id: true,
        initiated: true,
        initiatedPayload: true,
        message: true,
        payload: true,

        paymentAccount: {
          select: {
            id: true,
          },
        },

        paymentChannelId: true,
        share: true,
        status: true,
        transactionDate: true,
        transactionFee: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/b2bTransactionsItems")
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "update",
    possession: "any",
  })
  async connectB2bTransactionsItems(
    @common.Param() params: PaymentAccountsWhereUniqueInput,
    @common.Body() body: B2bTransactionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      b2bTransactionsItems: {
        connect: body,
      },
    };
    await this.service.updatePaymentAccounts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/b2bTransactionsItems")
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "update",
    possession: "any",
  })
  async updateB2bTransactionsItems(
    @common.Param() params: PaymentAccountsWhereUniqueInput,
    @common.Body() body: B2bTransactionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      b2bTransactionsItems: {
        set: body,
      },
    };
    await this.service.updatePaymentAccounts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/b2bTransactionsItems")
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "update",
    possession: "any",
  })
  async disconnectB2bTransactionsItems(
    @common.Param() params: PaymentAccountsWhereUniqueInput,
    @common.Body() body: B2bTransactionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      b2bTransactionsItems: {
        disconnect: body,
      },
    };
    await this.service.updatePaymentAccounts({
      where: params,
      data,
      select: { id: true },
    });
  }
}
