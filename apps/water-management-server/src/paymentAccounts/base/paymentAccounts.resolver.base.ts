/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaymentAccounts } from "./PaymentAccounts";
import { PaymentAccountsCountArgs } from "./PaymentAccountsCountArgs";
import { PaymentAccountsFindManyArgs } from "./PaymentAccountsFindManyArgs";
import { PaymentAccountsFindUniqueArgs } from "./PaymentAccountsFindUniqueArgs";
import { CreatePaymentAccountsArgs } from "./CreatePaymentAccountsArgs";
import { UpdatePaymentAccountsArgs } from "./UpdatePaymentAccountsArgs";
import { DeletePaymentAccountsArgs } from "./DeletePaymentAccountsArgs";
import { B2bTransactionsFindManyArgs } from "../../b2bTransactions/base/B2bTransactionsFindManyArgs";
import { B2bTransactions } from "../../b2bTransactions/base/B2bTransactions";
import { PaymentAccountsService } from "../paymentAccounts.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentAccounts)
export class PaymentAccountsResolverBase {
  constructor(
    protected readonly service: PaymentAccountsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "read",
    possession: "any",
  })
  async _paymentAccountsItemsMeta(
    @graphql.Args() args: PaymentAccountsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentAccounts])
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "read",
    possession: "any",
  })
  async paymentAccountsItems(
    @graphql.Args() args: PaymentAccountsFindManyArgs
  ): Promise<PaymentAccounts[]> {
    return this.service.paymentAccountsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentAccounts, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "read",
    possession: "own",
  })
  async paymentAccounts(
    @graphql.Args() args: PaymentAccountsFindUniqueArgs
  ): Promise<PaymentAccounts | null> {
    const result = await this.service.paymentAccounts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentAccounts)
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "create",
    possession: "any",
  })
  async createPaymentAccounts(
    @graphql.Args() args: CreatePaymentAccountsArgs
  ): Promise<PaymentAccounts> {
    return await this.service.createPaymentAccounts({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentAccounts)
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "update",
    possession: "any",
  })
  async updatePaymentAccounts(
    @graphql.Args() args: UpdatePaymentAccountsArgs
  ): Promise<PaymentAccounts | null> {
    try {
      return await this.service.updatePaymentAccounts({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentAccounts)
  @nestAccessControl.UseRoles({
    resource: "PaymentAccounts",
    action: "delete",
    possession: "any",
  })
  async deletePaymentAccounts(
    @graphql.Args() args: DeletePaymentAccountsArgs
  ): Promise<PaymentAccounts | null> {
    try {
      return await this.service.deletePaymentAccounts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [B2bTransactions], {
    name: "b2bTransactionsItems",
  })
  @nestAccessControl.UseRoles({
    resource: "B2bTransactions",
    action: "read",
    possession: "any",
  })
  async findB2bTransactionsItems(
    @graphql.Parent() parent: PaymentAccounts,
    @graphql.Args() args: B2bTransactionsFindManyArgs
  ): Promise<B2bTransactions[]> {
    const results = await this.service.findB2bTransactionsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
