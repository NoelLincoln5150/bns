/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProductLists } from "./ProductLists";
import { ProductListsCountArgs } from "./ProductListsCountArgs";
import { ProductListsFindManyArgs } from "./ProductListsFindManyArgs";
import { ProductListsFindUniqueArgs } from "./ProductListsFindUniqueArgs";
import { DeleteProductListsArgs } from "./DeleteProductListsArgs";
import { ProductListsService } from "../productLists.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductLists)
export class ProductListsResolverBase {
  constructor(
    protected readonly service: ProductListsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductLists",
    action: "read",
    possession: "any",
  })
  async _productListsItemsMeta(
    @graphql.Args() args: ProductListsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductLists])
  @nestAccessControl.UseRoles({
    resource: "ProductLists",
    action: "read",
    possession: "any",
  })
  async productListsItems(
    @graphql.Args() args: ProductListsFindManyArgs
  ): Promise<ProductLists[]> {
    return this.service.productListsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductLists, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductLists",
    action: "read",
    possession: "own",
  })
  async productLists(
    @graphql.Args() args: ProductListsFindUniqueArgs
  ): Promise<ProductLists | null> {
    const result = await this.service.productLists(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductLists)
  @nestAccessControl.UseRoles({
    resource: "ProductLists",
    action: "delete",
    possession: "any",
  })
  async deleteProductLists(
    @graphql.Args() args: DeleteProductListsArgs
  ): Promise<ProductLists | null> {
    try {
      return await this.service.deleteProductLists(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
