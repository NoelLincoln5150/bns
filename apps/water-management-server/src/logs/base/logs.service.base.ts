/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Logs as PrismaLogs, User as PrismaUser } from "@prisma/client";

export class LogsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LogsCountArgs, "select">): Promise<number> {
    return this.prisma.logs.count(args);
  }

  async logsItems(args: Prisma.LogsFindManyArgs): Promise<PrismaLogs[]> {
    return this.prisma.logs.findMany(args);
  }
  async logs(args: Prisma.LogsFindUniqueArgs): Promise<PrismaLogs | null> {
    return this.prisma.logs.findUnique(args);
  }
  async createLogs(args: Prisma.LogsCreateArgs): Promise<PrismaLogs> {
    return this.prisma.logs.create(args);
  }
  async updateLogs(args: Prisma.LogsUpdateArgs): Promise<PrismaLogs> {
    return this.prisma.logs.update(args);
  }
  async deleteLogs(args: Prisma.LogsDeleteArgs): Promise<PrismaLogs> {
    return this.prisma.logs.delete(args);
  }

  async getUserId(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.logs
      .findUnique({
        where: { id: parentId },
      })
      .userId();
  }
}
