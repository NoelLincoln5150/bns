/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Meters } from "./Meters";
import { MetersCountArgs } from "./MetersCountArgs";
import { MetersFindManyArgs } from "./MetersFindManyArgs";
import { MetersFindUniqueArgs } from "./MetersFindUniqueArgs";
import { DeleteMetersArgs } from "./DeleteMetersArgs";
import { MetersService } from "../meters.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Meters)
export class MetersResolverBase {
  constructor(
    protected readonly service: MetersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Meters",
    action: "read",
    possession: "any",
  })
  async _metersItemsMeta(
    @graphql.Args() args: MetersCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Meters])
  @nestAccessControl.UseRoles({
    resource: "Meters",
    action: "read",
    possession: "any",
  })
  async metersItems(
    @graphql.Args() args: MetersFindManyArgs
  ): Promise<Meters[]> {
    return this.service.metersItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Meters, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Meters",
    action: "read",
    possession: "own",
  })
  async meters(
    @graphql.Args() args: MetersFindUniqueArgs
  ): Promise<Meters | null> {
    const result = await this.service.meters(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Meters)
  @nestAccessControl.UseRoles({
    resource: "Meters",
    action: "delete",
    possession: "any",
  })
  async deleteMeters(
    @graphql.Args() args: DeleteMetersArgs
  ): Promise<Meters | null> {
    try {
      return await this.service.deleteMeters(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
