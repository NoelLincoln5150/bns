/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { C2bTransactions } from "./C2bTransactions";
import { C2bTransactionsCountArgs } from "./C2bTransactionsCountArgs";
import { C2bTransactionsFindManyArgs } from "./C2bTransactionsFindManyArgs";
import { C2bTransactionsFindUniqueArgs } from "./C2bTransactionsFindUniqueArgs";
import { CreateC2bTransactionsArgs } from "./CreateC2bTransactionsArgs";
import { UpdateC2bTransactionsArgs } from "./UpdateC2bTransactionsArgs";
import { DeleteC2bTransactionsArgs } from "./DeleteC2bTransactionsArgs";
import { C2bTransactionsService } from "../c2bTransactions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => C2bTransactions)
export class C2bTransactionsResolverBase {
  constructor(
    protected readonly service: C2bTransactionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "C2bTransactions",
    action: "read",
    possession: "any",
  })
  async _c2bTransactionsItemsMeta(
    @graphql.Args() args: C2bTransactionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [C2bTransactions])
  @nestAccessControl.UseRoles({
    resource: "C2bTransactions",
    action: "read",
    possession: "any",
  })
  async c2bTransactionsItems(
    @graphql.Args() args: C2bTransactionsFindManyArgs
  ): Promise<C2bTransactions[]> {
    return this.service.c2bTransactionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => C2bTransactions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "C2bTransactions",
    action: "read",
    possession: "own",
  })
  async c2bTransactions(
    @graphql.Args() args: C2bTransactionsFindUniqueArgs
  ): Promise<C2bTransactions | null> {
    const result = await this.service.c2bTransactions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => C2bTransactions)
  @nestAccessControl.UseRoles({
    resource: "C2bTransactions",
    action: "create",
    possession: "any",
  })
  async createC2bTransactions(
    @graphql.Args() args: CreateC2bTransactionsArgs
  ): Promise<C2bTransactions> {
    return await this.service.createC2bTransactions({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => C2bTransactions)
  @nestAccessControl.UseRoles({
    resource: "C2bTransactions",
    action: "update",
    possession: "any",
  })
  async updateC2bTransactions(
    @graphql.Args() args: UpdateC2bTransactionsArgs
  ): Promise<C2bTransactions | null> {
    try {
      return await this.service.updateC2bTransactions({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => C2bTransactions)
  @nestAccessControl.UseRoles({
    resource: "C2bTransactions",
    action: "delete",
    possession: "any",
  })
  async deleteC2bTransactions(
    @graphql.Args() args: DeleteC2bTransactionsArgs
  ): Promise<C2bTransactions | null> {
    try {
      return await this.service.deleteC2bTransactions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
