/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PaymentChannels } from "./PaymentChannels";
import { PaymentChannelsCountArgs } from "./PaymentChannelsCountArgs";
import { PaymentChannelsFindManyArgs } from "./PaymentChannelsFindManyArgs";
import { PaymentChannelsFindUniqueArgs } from "./PaymentChannelsFindUniqueArgs";
import { DeletePaymentChannelsArgs } from "./DeletePaymentChannelsArgs";
import { PaymentChannelsService } from "../paymentChannels.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentChannels)
export class PaymentChannelsResolverBase {
  constructor(
    protected readonly service: PaymentChannelsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentChannels",
    action: "read",
    possession: "any",
  })
  async _paymentChannelsItemsMeta(
    @graphql.Args() args: PaymentChannelsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentChannels])
  @nestAccessControl.UseRoles({
    resource: "PaymentChannels",
    action: "read",
    possession: "any",
  })
  async paymentChannelsItems(
    @graphql.Args() args: PaymentChannelsFindManyArgs
  ): Promise<PaymentChannels[]> {
    return this.service.paymentChannelsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentChannels, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentChannels",
    action: "read",
    possession: "own",
  })
  async paymentChannels(
    @graphql.Args() args: PaymentChannelsFindUniqueArgs
  ): Promise<PaymentChannels | null> {
    const result = await this.service.paymentChannels(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentChannels)
  @nestAccessControl.UseRoles({
    resource: "PaymentChannels",
    action: "delete",
    possession: "any",
  })
  async deletePaymentChannels(
    @graphql.Args() args: DeletePaymentChannelsArgs
  ): Promise<PaymentChannels | null> {
    try {
      return await this.service.deletePaymentChannels(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
