/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PaymentChannels as PrismaPaymentChannels,
} from "@prisma/client";

export class PaymentChannelsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentChannelsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentChannels.count(args);
  }

  async paymentChannelsItems(
    args: Prisma.PaymentChannelsFindManyArgs
  ): Promise<PrismaPaymentChannels[]> {
    return this.prisma.paymentChannels.findMany(args);
  }
  async paymentChannels(
    args: Prisma.PaymentChannelsFindUniqueArgs
  ): Promise<PrismaPaymentChannels | null> {
    return this.prisma.paymentChannels.findUnique(args);
  }
  async createPaymentChannels(
    args: Prisma.PaymentChannelsCreateArgs
  ): Promise<PrismaPaymentChannels> {
    return this.prisma.paymentChannels.create(args);
  }
  async updatePaymentChannels(
    args: Prisma.PaymentChannelsUpdateArgs
  ): Promise<PrismaPaymentChannels> {
    return this.prisma.paymentChannels.update(args);
  }
  async deletePaymentChannels(
    args: Prisma.PaymentChannelsDeleteArgs
  ): Promise<PrismaPaymentChannels> {
    return this.prisma.paymentChannels.delete(args);
  }
}
