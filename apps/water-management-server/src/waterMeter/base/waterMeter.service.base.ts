/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WaterMeter as PrismaWaterMeter } from "@prisma/client";

export class WaterMeterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WaterMeterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.waterMeter.count(args);
  }

  async waterMeters(
    args: Prisma.WaterMeterFindManyArgs
  ): Promise<PrismaWaterMeter[]> {
    return this.prisma.waterMeter.findMany(args);
  }
  async waterMeter(
    args: Prisma.WaterMeterFindUniqueArgs
  ): Promise<PrismaWaterMeter | null> {
    return this.prisma.waterMeter.findUnique(args);
  }
  async createWaterMeter(
    args: Prisma.WaterMeterCreateArgs
  ): Promise<PrismaWaterMeter> {
    return this.prisma.waterMeter.create(args);
  }
  async updateWaterMeter(
    args: Prisma.WaterMeterUpdateArgs
  ): Promise<PrismaWaterMeter> {
    return this.prisma.waterMeter.update(args);
  }
  async deleteWaterMeter(
    args: Prisma.WaterMeterDeleteArgs
  ): Promise<PrismaWaterMeter> {
    return this.prisma.waterMeter.delete(args);
  }
}
