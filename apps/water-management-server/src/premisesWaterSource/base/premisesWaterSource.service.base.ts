/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PremisesWaterSource as PrismaPremisesWaterSource,
} from "@prisma/client";

export class PremisesWaterSourceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PremisesWaterSourceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.premisesWaterSource.count(args);
  }

  async premisesWaterSources(
    args: Prisma.PremisesWaterSourceFindManyArgs
  ): Promise<PrismaPremisesWaterSource[]> {
    return this.prisma.premisesWaterSource.findMany(args);
  }
  async premisesWaterSource(
    args: Prisma.PremisesWaterSourceFindUniqueArgs
  ): Promise<PrismaPremisesWaterSource | null> {
    return this.prisma.premisesWaterSource.findUnique(args);
  }
  async createPremisesWaterSource(
    args: Prisma.PremisesWaterSourceCreateArgs
  ): Promise<PrismaPremisesWaterSource> {
    return this.prisma.premisesWaterSource.create(args);
  }
  async updatePremisesWaterSource(
    args: Prisma.PremisesWaterSourceUpdateArgs
  ): Promise<PrismaPremisesWaterSource> {
    return this.prisma.premisesWaterSource.update(args);
  }
  async deletePremisesWaterSource(
    args: Prisma.PremisesWaterSourceDeleteArgs
  ): Promise<PrismaPremisesWaterSource> {
    return this.prisma.premisesWaterSource.delete(args);
  }
}
