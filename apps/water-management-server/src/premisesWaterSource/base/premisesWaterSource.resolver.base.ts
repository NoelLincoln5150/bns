/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PremisesWaterSource } from "./PremisesWaterSource";
import { PremisesWaterSourceCountArgs } from "./PremisesWaterSourceCountArgs";
import { PremisesWaterSourceFindManyArgs } from "./PremisesWaterSourceFindManyArgs";
import { PremisesWaterSourceFindUniqueArgs } from "./PremisesWaterSourceFindUniqueArgs";
import { CreatePremisesWaterSourceArgs } from "./CreatePremisesWaterSourceArgs";
import { UpdatePremisesWaterSourceArgs } from "./UpdatePremisesWaterSourceArgs";
import { DeletePremisesWaterSourceArgs } from "./DeletePremisesWaterSourceArgs";
import { WaterSources } from "../../waterSources/base/WaterSources";
import { PremisesWaterSourceService } from "../premisesWaterSource.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PremisesWaterSource)
export class PremisesWaterSourceResolverBase {
  constructor(
    protected readonly service: PremisesWaterSourceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PremisesWaterSource",
    action: "read",
    possession: "any",
  })
  async _premisesWaterSourcesMeta(
    @graphql.Args() args: PremisesWaterSourceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PremisesWaterSource])
  @nestAccessControl.UseRoles({
    resource: "PremisesWaterSource",
    action: "read",
    possession: "any",
  })
  async premisesWaterSources(
    @graphql.Args() args: PremisesWaterSourceFindManyArgs
  ): Promise<PremisesWaterSource[]> {
    return this.service.premisesWaterSources(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PremisesWaterSource, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PremisesWaterSource",
    action: "read",
    possession: "own",
  })
  async premisesWaterSource(
    @graphql.Args() args: PremisesWaterSourceFindUniqueArgs
  ): Promise<PremisesWaterSource | null> {
    const result = await this.service.premisesWaterSource(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PremisesWaterSource)
  @nestAccessControl.UseRoles({
    resource: "PremisesWaterSource",
    action: "create",
    possession: "any",
  })
  async createPremisesWaterSource(
    @graphql.Args() args: CreatePremisesWaterSourceArgs
  ): Promise<PremisesWaterSource> {
    return await this.service.createPremisesWaterSource({
      ...args,
      data: {
        ...args.data,

        waterSourceId: args.data.waterSourceId
          ? {
              connect: args.data.waterSourceId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PremisesWaterSource)
  @nestAccessControl.UseRoles({
    resource: "PremisesWaterSource",
    action: "update",
    possession: "any",
  })
  async updatePremisesWaterSource(
    @graphql.Args() args: UpdatePremisesWaterSourceArgs
  ): Promise<PremisesWaterSource | null> {
    try {
      return await this.service.updatePremisesWaterSource({
        ...args,
        data: {
          ...args.data,

          waterSourceId: args.data.waterSourceId
            ? {
                connect: args.data.waterSourceId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PremisesWaterSource)
  @nestAccessControl.UseRoles({
    resource: "PremisesWaterSource",
    action: "delete",
    possession: "any",
  })
  async deletePremisesWaterSource(
    @graphql.Args() args: DeletePremisesWaterSourceArgs
  ): Promise<PremisesWaterSource | null> {
    try {
      return await this.service.deletePremisesWaterSource(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WaterSources, {
    nullable: true,
    name: "waterSourceId",
  })
  @nestAccessControl.UseRoles({
    resource: "WaterSources",
    action: "read",
    possession: "any",
  })
  async getWaterSourceId(
    @graphql.Parent() parent: PremisesWaterSource
  ): Promise<WaterSources | null> {
    const result = await this.service.getWaterSourceId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
