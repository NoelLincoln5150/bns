/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContractParty } from "./ContractParty";
import { ContractPartyCountArgs } from "./ContractPartyCountArgs";
import { ContractPartyFindManyArgs } from "./ContractPartyFindManyArgs";
import { ContractPartyFindUniqueArgs } from "./ContractPartyFindUniqueArgs";
import { CreateContractPartyArgs } from "./CreateContractPartyArgs";
import { UpdateContractPartyArgs } from "./UpdateContractPartyArgs";
import { DeleteContractPartyArgs } from "./DeleteContractPartyArgs";
import { ContractPartyService } from "../contractParty.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContractParty)
export class ContractPartyResolverBase {
  constructor(
    protected readonly service: ContractPartyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContractParty",
    action: "read",
    possession: "any",
  })
  async _contractPartiesMeta(
    @graphql.Args() args: ContractPartyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContractParty])
  @nestAccessControl.UseRoles({
    resource: "ContractParty",
    action: "read",
    possession: "any",
  })
  async contractParties(
    @graphql.Args() args: ContractPartyFindManyArgs
  ): Promise<ContractParty[]> {
    return this.service.contractParties(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContractParty, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContractParty",
    action: "read",
    possession: "own",
  })
  async contractParty(
    @graphql.Args() args: ContractPartyFindUniqueArgs
  ): Promise<ContractParty | null> {
    const result = await this.service.contractParty(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContractParty)
  @nestAccessControl.UseRoles({
    resource: "ContractParty",
    action: "create",
    possession: "any",
  })
  async createContractParty(
    @graphql.Args() args: CreateContractPartyArgs
  ): Promise<ContractParty> {
    return await this.service.createContractParty({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContractParty)
  @nestAccessControl.UseRoles({
    resource: "ContractParty",
    action: "update",
    possession: "any",
  })
  async updateContractParty(
    @graphql.Args() args: UpdateContractPartyArgs
  ): Promise<ContractParty | null> {
    try {
      return await this.service.updateContractParty({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractParty)
  @nestAccessControl.UseRoles({
    resource: "ContractParty",
    action: "delete",
    possession: "any",
  })
  async deleteContractParty(
    @graphql.Args() args: DeleteContractPartyArgs
  ): Promise<ContractParty | null> {
    try {
      return await this.service.deleteContractParty(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
