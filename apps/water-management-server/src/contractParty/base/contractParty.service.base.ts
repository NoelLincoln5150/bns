/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ContractParty as PrismaContractParty } from "@prisma/client";

export class ContractPartyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContractPartyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contractParty.count(args);
  }

  async contractParties(
    args: Prisma.ContractPartyFindManyArgs
  ): Promise<PrismaContractParty[]> {
    return this.prisma.contractParty.findMany(args);
  }
  async contractParty(
    args: Prisma.ContractPartyFindUniqueArgs
  ): Promise<PrismaContractParty | null> {
    return this.prisma.contractParty.findUnique(args);
  }
  async createContractParty(
    args: Prisma.ContractPartyCreateArgs
  ): Promise<PrismaContractParty> {
    return this.prisma.contractParty.create(args);
  }
  async updateContractParty(
    args: Prisma.ContractPartyUpdateArgs
  ): Promise<PrismaContractParty> {
    return this.prisma.contractParty.update(args);
  }
  async deleteContractParty(
    args: Prisma.ContractPartyDeleteArgs
  ): Promise<PrismaContractParty> {
    return this.prisma.contractParty.delete(args);
  }
}
